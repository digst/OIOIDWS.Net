<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
  </configSections>
  <system.diagnostics>
    <sources>
      <source propagateActivity="false" name="System.ServiceModel" logKnownPii="true" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" logKnownPii="true" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <!--
    Placed at:
      * "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\machine.config"
      
      in order to enable logKnownPii the machine.config must also be updated with
    
      <system.serviceModel>
        <machineSettings enableLoggingKnownPii="true"/>
      </system.serviceModel>
    
      logKnownPii makes it possible to see the concrete value which the digest value represent in a SignedInfo reference element.
    -->
      <source name="System.IdentityModel" logKnownPii="true" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.Security" logKnownPii="true" switchValue="Information">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <source name="Digst.OioIdws" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
    </sources>
    <switches>
      <add name="Saml2SecurityTokenHandlerLogSwitch" value="Verbose"/>
      <add name="XmlDsigLogSwitch" value="Verbose"/>
    </switches>
    <trace autoflush="true">
      <listeners>
        <add name="ServiceModelMessageLoggingListener"/>
      </listeners>
    </trace>
    <sharedListeners>
      <add initializeData="C:\temp\Digst.OioIdws.WspHealthcareBearerExample.svclog" name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp" type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <filter type=""/>
      </add>
    </sharedListeners>
  </system.diagnostics>
  <startup>
    <supportedRuntime sku=".NETFramework,Version=v4.5.2" version="v4.0"/>
  </startup>

  <system.serviceModel>
    
    <bindings>
      <ws2007FederationHttpBinding>
        <binding name="Ws2007Binding">
          <security mode="TransportWithMessageCredential">
            <message algorithmSuite="Basic256Sha256" establishSecurityContext="false"
              issuedKeyType="BearerKey" issuedTokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
              negotiateServiceCredential="false" />
          </security>
        </binding>
      </ws2007FederationHttpBinding>
    </bindings>

    <services>
      <service behaviorConfiguration="ServiceBehaviourConfiguration" name="Digst.OioIdws.WspHealthcareBearerExample.HelloWorld">
        <endpoint address="https://digst.oioidws.wsp:9091/helloworld" binding="ws2007FederationHttpBinding" bindingConfiguration="Ws2007Binding" contract="Digst.OioIdws.WspHealthcareBearerExample.IHelloWorld"/>
      </service>
    </services>

    <diagnostics performanceCounters="Default" />

    <behaviors>
      <serviceBehaviors>
        <behavior name="ServiceBehaviourConfiguration">
          <!-- To avoid disclosing metadata information, set the values below to false before deployment -->
          <serviceMetadata httpGetEnabled="false" httpsGetEnabled="true"/>
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="false"/>
          <serviceCredentials useIdentityConfiguration="true">
            <serviceCertificate findValue="1F0830937C74B0567D6B05C07B6155059D9B10C7" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>
          </serviceCredentials>
        </behavior>
      </serviceBehaviors>
    </behaviors>

    <protocolMapping>
      <add binding="basicHttpsBinding" scheme="https" />
    </protocolMapping>

    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />

  </system.serviceModel>
  

  <system.identityModel>
    <identityConfiguration>
      <!--audienceUris specifies this service and is used to check that the SAML token from the STS is indeed issued to this service.-->
      <audienceUris>
        <add value="https://digst.oioidws.wsp:9090/helloworld"/>
        <add value="https://wsp.oioidws-net.dk"/>
      </audienceUris>
      <!--issuerNameRegistry specifies the certificate of the Nemlog-In STS. Both thumbprint and Common Name must be specified.-->
      <!--Issuer certificate is embedded in the encrypted SAML assertion. Hence, it it does not need to be recieved out-of-band and placed in the certificate store-->
      <issuerNameRegistry>
        <trustedIssuers>
          <add name="IDWS XUA Test STS (funktionscertifikat)" thumbprint="af7691346492dc30d127d85537297d702993176c"/>
          <add name="Digitaliseringsstyrelsen - NemLog-in Test" thumbprint="d9f10c97aa647727adb64a349bb037c5c23c9a7a"/>
          <add name="Oiosaml-net.dk TEST (funktionscertifikat)" thumbprint="0e6dbcc6efaaff72e3f3d824e536381b26deecf5"/>
        </trustedIssuers>
      </issuerNameRegistry>
      <!--The Saml2SecurityTokenHandler security token handler must be replacded by a custom extended handler which supports tokens with "complex" (xml payload) attribute values -->
      <securityTokenHandlers>
        <remove type="System.IdentityModel.Tokens.Saml2SecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
        <add type="Digst.OioIdws.SecurityTokens.Tokens.ExtendedSaml2SecurityToken.ExtendedSaml2SecurityTokenHandler, Digst.OioIdws.SecurityTokens"/>
      </securityTokenHandlers>
    </identityConfiguration>
  </system.identityModel>
</configuration>
