<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <configSections>
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
    <section name="oioIdwsWcfConfiguration" type="Digst.OioIdws.Wsc.OioWsTrust.Configuration, Digst.OioIdws.Wsc, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
    <section name="oioIdwsLoggingConfiguration" type="Digst.OioIdws.Common.Logging.Configuration, Digst.OioIdws.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
    
  </configSections>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2"/>
  </startup>

  <!--system.identityModel is used by WIF which is enabled by setting useIdentityConfiguration to true under serviceCredentials,-->
  <system.identityModel>
    <identityConfiguration>
      <!--The Saml2SecurityTokenHandler security token handler must be replacded by a custom extended handler which supports tokens with "complex" (xml payload) attribute values -->
      <securityTokenHandlers>
        <remove type="System.IdentityModel.Tokens.Saml2SecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
        <add type="Digst.ExtendedSaml2SecurityToken.ExtendedSaml2SecurityTokenHandler, Digst.ExtendedSaml2SecurityToken"/>
      </securityTokenHandlers>
    </identityConfiguration>
  </system.identityModel>

  <oioIdwsWcfConfiguration debugMode="true" stsEndpointAddress="https://SecureTokenService.test-nemlog-in.dk/SecurityTokenService.svc" tokenLifeTimeInMinutes="5" wspEndpointID="https://wsp.oioidws-net.dk">
    <clientCertificate findValue="0E6DBCC6EFAAFF72E3F3D824E536381B26DEECF5" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>
    <stsCertificate findValue="d9f10c97aa647727adb64a349bb037c5c23c9a7a" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>
  </oioIdwsWcfConfiguration>

  <oioIdwsLoggingConfiguration logger="Digst.OioIdws.WscUnencryptedBearerExample.Log4NetLogger, Digst.OioIdws.WscUnencryptedBearerExample"/>

  <system.serviceModel>
    <diagnostics>
      <messageLogging logKnownPii="true" logEntireMessage="true" logMalformedMessages="true" logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="true"/>
    </diagnostics>
    <extensions>
      <bindingExtensions>
        <add name="SoapBinding" type="Digst.OioIdws.Soap.Bindings.SoapBindingCollectionElement, Digst.OioIdws.Soap"/>
      </bindingExtensions>
      <behaviorExtensions>
        <add name="SoapBehavior" type="Digst.OioIdws.Soap.Behaviors.SoapClientBehaviorExtensionElement, Digst.OioIdws.Soap"/>
      </behaviorExtensions>
    </extensions>
    <behaviors>
      <endpointBehaviors>
        <behavior name="SoapBehaviourConfiguration">
          <clientCredentials useIdentityConfiguration="true">
            <serviceCertificate>
              <scopedCertificates>
                <!--HTTP:<add findValue="1F0830937C74B0567D6B05C07B6155059D9B10C7" storeLocation="LocalMachine" storeName="My" targetUri="https://digst.oioidws.wsp:9090/helloworld" x509FindType="FindByThumbprint"/>-->
                <add findValue="1F0830937C74B0567D6B05C07B6155059D9B10C7" storeLocation="LocalMachine" storeName="My" targetUri="https://digst.oioidws.wsp:9090/helloworld" x509FindType="FindByThumbprint"/>
              </scopedCertificates>
            </serviceCertificate>
          </clientCredentials>
          <!--Endpoints can only point to a single behaviour configuration. Hence, we need to include the SoapBehavior in a existing behavior-->
          <SoapBehavior/>
        </behavior>
      </endpointBehaviors>
    </behaviors>
    <bindings>
      <customBinding>
        <binding name="SoapBinding_IHelloWorld">
          <!--The configuration schema is insufficient to describe the non-standard configuration of the following security binding element: -->
          <!--System.ServiceModel.Channels.AsymmetricSecurityBindingElement:
DefaultAlgorithmSuite: Basic256
IncludeTimestamp: True
KeyEntropyMode: CombinedEntropy
MessageSecurityVersion: WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10
SecurityHeaderLayout: Strict
ProtectTokens: True
EndpointSupportingTokenParameters:
  No endorsing tokens.
  Signed[0]
    System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters:
    InclusionMode: AlwaysToRecipient
    ReferenceStyle: Internal
    RequireDerivedKeys: False
    TokenType: null
    KeyType: SymmetricKey
    KeySize: 0
    IssuerAddress: null
    IssuerMetadataAddress: null
    DefaultMessgeSecurityVersion: null
    UseStrTransform: False
    IssuerBinding: null
    ClaimTypeRequirements: none
  No signed encrypted tokens.
  No signed endorsing tokens.
OptionalEndpointSupportingTokenParameters:
  No endorsing tokens.
  No signed tokens.
  No signed encrypted tokens.
  No signed endorsing tokens.
OperationSupportingTokenParameters: none
OptionalOperationSupportingTokenParameters: none
MessageProtectionOrder: SignBeforeEncrypt
RequireSignatureConfirmation: False
InitiatorTokenParameters: System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters:
  InclusionMode: Never
  ReferenceStyle: Internal
  RequireDerivedKeys: False
  TokenType: null
  KeyType: SymmetricKey
  KeySize: 0
  IssuerAddress: null
  IssuerMetadataAddress: null
  DefaultMessgeSecurityVersion: null
  UseStrTransform: False
  IssuerBinding: null
  ClaimTypeRequirements: none
RecipientTokenParameters: System.ServiceModel.Security.Tokens.X509SecurityTokenParameters:
  InclusionMode: AlwaysToInitiator
  ReferenceStyle: Internal
  RequireDerivedKeys: False
  X509ReferenceStyle: Any-->
          <textMessageEncoding />
          <httpsTransport />
        </binding>
      </customBinding>
      <SoapBinding>
        <binding name="SoapBindingConfiguration" useHttps="true" />
      </SoapBinding>
    </bindings>
    <client>
      <endpoint address="https://digst.oioidws.wsp:9090/helloworld"
        behaviorConfiguration="SoapBehaviourConfiguration" binding="SoapBinding"
        bindingConfiguration="SoapBindingConfiguration" contract="HelloWorldProxy.IHelloWorld">
        <identity>
          <dns value="wsp.oioidws-net.dk TEST (funktionscertifikat)" />
        </identity>
      </endpoint>
      <endpoint address="https://digst.oioidws.wsp:9090/HelloWorld"
        binding="customBinding" bindingConfiguration="SoapBinding_IHelloWorld"
        contract="HelloWorldProxy.IHelloWorld" name="SoapBinding_IHelloWorld">
        <identity>
          <certificate encodedValue="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" />
        </identity>
      </endpoint>
    </client>
  </system.serviceModel>

  
  <log4net>
    <appender name="RollingFile" type="log4net.Appender.RollingFileAppender">
      <file value="c:\temp\Digst.OioIdws.WscExample.log"/>
      <appendToFile value="true"/>
      <maximumFileSize value="100KB"/>
      <maxSizeRollBackups value="2"/>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%level %thread %logger - %message%newline"/>
      </layout>
    </appender>
    <root>
      <level value="DEBUG"/>
      <appender-ref ref="RollingFile"/>
    </root>
  </log4net>


  <system.diagnostics>
    <sources>
      <source propagateActivity="false" name="System.ServiceModel" logKnownPii="true" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" logKnownPii="true" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <!--
    in order to enable logKnownPii the machine.config must also be updated with
    
    <system.serviceModel>
      <machineSettings enableLoggingKnownPii="true"/>
    </system.serviceModel>
    
    logKnownPii makes it possible to see the concrete value which the digest value represent in a SignedInfo reference element.
    -->
      <source name="System.IdentityModel" logKnownPii="true" switchValue="Verbose">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
      <source name="Digst.OioIdws" switchValue="Information">
        <listeners>
          <add name="ServiceModelMessageLoggingListener">
            <filter type=""/>
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="C:\temp\Digst.OioIdws.WscExample.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type=""/>
      </add>
    </sharedListeners>
  </system.diagnostics>


</configuration>
